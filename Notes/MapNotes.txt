# Map
>***Importante:***
>
>map es una función pura, debe retornar siempre el mismo resultado bajo los mismos parámetros y no debe producir nucca efectos secundarios

El método map es utilizado cuando tenemos un `array` y queremos aplicar una función a cada uno de los elementos dentro del mismo y devolver un array nuevo sin tocar el original. 

    const arrayOfObjects = [
        { id: "r4md0mnumb3r5", 
        nombre: camiseta, 
        precio: 500 },

        { id: "r4md0mnumb3r52", 
        nombre: pantalon, 
        precio: 700 }
    ]

## Sintaxis

Como todos los métodos, map se usa indicando el nombre del array, un punto (.) y el nombre del método, map en este caso.

    const mapTest = array.map()

El solo hecho de expresar una función `const mapTest = array.map()` crea una copia del array original con la que se puede trabajar

    const mapTest = array.map(elemento*, índice**, arrayOriginal*** => función)

- *elemento: este es cada uno de los elementos dentro del array (números, objeto, string... etc.)
- **índice: indica la posición dentro del array original
- *** arrayOriginal, hace referencia al array original, no es crecomendable usarlo ya que la intención de utilizar map es que no modifique el input. 

Para utilizar de manera más explícita el map se podría expresar de la siguiente manera:

    const mapTest = array.map(function (elemento, índice, arrayOriginal){
        return
    })


La manera más común de econtarlo es trabajando directamente con los ementos dentro del array:

    const mapTest = array.map(elemento => functión)

o

    const mapTest = array.map(function (elemento){
        return elementoModificado
    })


## Ejemplo de una función sencilla:
    const numeros = [3, 10, 20, 50]
    const dobles = numeros.map(numero => numero * 2) 
    console.log(numeros) // => [3, 10, 20, 50]
    console.log(dobles) // => [6, 20, 40, 100]


## Ejemplo de map con objetos:

    const productos = [{
        id: "aAvVbBnNdDeeEfFggG025698",
        nombre: "camiseta",
        precio: 500
    },
    {
        id: "aAvVbBnNdDeasERggG025698",
        nombre: "camiseta",
        precio: 2000
    },
    {
        id: "aAvvvaaNdDeasERggG025698",
        nombre: "camiseta",
        precio: 1500
    }]

Crear una función con este array de objetos que aplique el 10% de descuento al precio del producto solamente si sobrepasa los 1000.


    const productosConDescuento = productos.map(function (elementos) {
        if (elementos.precio < 1000) return elementos 
    return {
        ...elementos, 
        precio: elementos.precio * 0.9 
        }
    })
    console.log(productosConDescuento)

Vamos a descomponer esta función de la siguiente manera:

    const productosConDescuento = productos.map(function (elementos) 

>Lo primero a resaltar es que la función se expresa como valor de una variable `const = productosConDescuento =`

>Después del igual viene `productos.map` el array seguido del método `map(funcion (elementos))` en donde `elementos` equivale a cada uno de los elementos dentro del array, puede ser un string, un objeto, un número, un booleano etc. Es el nombre de los item que van dentro del array

>`if(elementos.precio < 1000) return elementos` Con esta línea filtramos los elementos dentro del array por precio y dejamos por fuera los que no entran en la condición. El return de esta condición va directamente al return de la función que también se debe agregar.
Si yo dejo solamente este `return elementos` el resultado de la función sería el elemento que cumple con la condiciión `elementos.precio < 1000 (el primero)` y luego `undefined` hasta que se complete el número de elementos dentro del array.
>>Si `elementos.precio` es menor que `1000`, no hace nada y deja ese elemento intacto. Si por el contrario la condición no se cumple, devuelve el valor dentro de `elementos`
 
    return {
        ...elementos, 
        precio: elementos.precio * 0.9 
        }
>En esta porción de código se reciben los elementos que no pasaron el filtro (los objetos que tienen un precio > a 1000) y los entrega `...elementos,` y reasigna la propiedad `precio` dentro del objeto a 90% (*0.9) utilizando la expresión `precio: elementos.precio * 0.9`

***Importante***
>El papel de ese `if` en medio de la función fue algo que me costó mucho entender. En palabras un poco menos profesionales podría decir que: La intención de ese if es quitarme de en medio los casos que no me interesan. 
>Mi tarea en esta función consiste en modificar los elementos cuyo precio se mayor a 1000, si utilizo una condición para identificar los que no cumplen esa condición y retornarlos inmediatamente es como sacarlos del paso para no confundirme más adelante.

>Si el precio del elemento es menor que 1000, déjelo tal cual está y devuélvamelo tal cual sin modificar, no le haga nada después de haberlo retornado que yo voy a trabajar con el resto de los elementos en el pedazo de código que viene después. 