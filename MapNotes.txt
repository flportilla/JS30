# Map
>***Importante:***
>
>map es una función pura, debe retornar siempre el mismo resultado bajo los mismos parámetros y no debe producir nucca efectos secundarios

El método map es utilizado cuando tenemos un `array` y queremos aplicar una función a cada uno de los elementos dentro del mismo y devolver un array nuevo sin tocar el original. 

    const arrayOfObjects = [
        { id: "r4md0mnumb3r5", 
        nombre: camiseta, 
        precio: 500 },

        { id: "r4md0mnumb3r52", 
        nombre: pantalon, 
        precio: 700 }
    ]

## Sintaxis

Como todos los métodos, map se usa indicando el nombre del array, un punto (.) y el nombre del método, map en este caso.

    const mapTest = array.map()

El solo hecho de expresar una función `const mapTest = array.map()` crea una copia del array original con la que se puede trabajar

    const mapTest = array.map(elemento*, índice**, arrayOriginal*** => función)

- *elemento: este es cada uno de los elementos dentro del array (números, objeto, string... etc.)
- **índice: indica la posición dentro del array original
- *** arrayOriginal, hace referencia al array original, no es crecomendable usarlo ya que la intención de utilizar map es que no modifique el input. 

Para utilizar de manera más explícita el map se podría expresar de la siguiente manera:

    const mapTest = array.map(function (elemento, índice, arrayOriginal){
        return
    })


La manera más común de econtarlo es trabajando directamente con los ementos dentro del array:

    const mapTest = array.map(elemento => functión)

o

    const mapTest = array.map(function (elemento){
        return elementoModificado
    })



## Ejemplo de una función sencilla:
>   const numeros = [3, 10, 20, 50]
>
>   const dobles = numeros.map(numero => numero * 2) 
>
>   console.log(numeros) //[3, 10, 20, 50]
>
>   console.log(dobles) //[6, 20, 40, 100]


const numeros = [3, 10, 20, 50]
const dobles = numeros.map(elemento => elemento*2);

console.log(numeros) // [3, 10, 20, 50] el array original conserva sus valores
console.log(dobles) // [6, 20, 40, 100] "dobles" ahora contiene los valores del array original después de la función (2)


/
Sí el método map() se usa sin ninguna función (map() solo) hace lo mismo que slice(), entrega una copia del array original en una nueva variable
 /


const copynumeros = numeros.map()
console.log(copynumeros)// [3, 10, 20, 50]


//ejemplo de map con objetos

const productos = [{
id: "ajkhsdjkasdHKJLAHSDKJH",
nombre: "camiseta",
precio: 500
},
{
id: "ajkhsdjkasdHKJLAHSDKJH123",
nombre: "camiseta",
precio: 2000
}, {
id: "ajkhsdjkasdHKJLAHSDKJH456",
nombre: "camiseta",
precio: 1500
}]

//con el array anterior y usando map, aplique el 10% de descuento cuando el valor del producto sea 1000 o más

//lo primero sería crear una nueva variable en la que se va a almacernar el producto

const productosConDescuento = productos.map(function (elementos) {

if (elementos.precio < 1000) return elementos //si el precio es menor a 1000, déjelo por fuera y seguimos trabajando en el resto
//es como decir: si el precio es inferior a 1000 devuelva el resto y saque ese de lo que viene ahora
//básicamente aquí filtro los elementos para descartar los que no quiero modificar
return {
...elementos, //copia todas las propiedades del elemento original.
precio: elementos.precio0.9 // si dejo solo la línea de arriba me devuelve los precios tal cual entraron, aquí es donde se calcula el descuento
}
//el motivo de que esta función tenga dos return es porque hay un return del if y otro de la función como tal
//si quito el segundo return el valor de productosConDescuento sería el primer return (el primer objeto completo) y dos undefined
})

console.log(productosConDescuento)